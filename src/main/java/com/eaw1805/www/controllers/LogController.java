package com.eaw1805.www.controllers;

import com.eaw1805.www.commands.NationCommand;
import org.apache.logging.log4j.LogManager; import org.apache.logging.log4j.Logger;
import org.springframework.validation.BindException;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.AbstractRestController;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.OutputStream;

/**
 * Display logs generated by the engine.
 */
public class LogController
        extends AbstractRestController {

    public static final String ENGINE_PATH = "/srv/eaw1805";

    public static final String LOGS_PATH = ENGINE_PATH + "/log/";

    /**
     * a log4j logger to print messages.
     */
    private static final Logger LOGGER = LogManager.getLogger(LogController.class);

    public LogController() {
        super();

        // Make sure to set which method this controller will support.
        this.setSupportedMethods(new String[]{METHOD_GET});
    }

    protected ModelAndView handle(final HttpServletRequest request,
                                  final HttpServletResponse response, final Object commandObj, final BindException errors)
            throws Exception {

        final NationCommand command = (NationCommand) commandObj;

        // Retrieve Game entity
        final String gameId = command.getGameId();
        LOGGER.debug(gameId);
        if ((gameId == null) || (gameId.isEmpty())) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            return null;
        }

        // Retrieve Turn
        final String turnStr = command.getTurn();
        if (turnStr == null) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            return null;
        }

        // Get the absolute path of the image
        final String filename = LOGS_PATH + "empire-engine-" + gameId + "-" + turnStr + ".log";
        final File file = new File(filename);

        if (!file.exists()) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            return null;
        }

        // Set content type
        response.setContentType("text/plain");

        // Set content size
        response.setContentLength((int) file.length());

        // Add headers
        response.addDateHeader("Last-Modified", file.lastModified());

        final long expires = 31536000000L + file.lastModified();
        response.addDateHeader("Expires", expires); // ..ms = 365 days.

        // Open the file and output streams
        final FileInputStream in = new FileInputStream(file);
        final OutputStream out = response.getOutputStream();

        // Copy the contents of the file to the output stream
        final byte[] buf = new byte[16384];
        int count;
        while ((count = in.read(buf)) >= 0) {
            out.write(buf, 0, count);
        }
        in.close();
        out.close();

        LOGGER.info("Serving " + filename + " [Expires=" + (expires - System.currentTimeMillis()) / 1000L * 60L * 60L + "h]");
        return null;
    }

}
